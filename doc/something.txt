-- (Note from dtoffe: This is a rough Google-translation from the original Chinese text)

- Some details:

1). About the processing (or handling) of the constructor and destructor

In Object Pascal，the class' constructor and destructor have to pass in additional parameters:
One is the class type (VMT pointer)，another is the tag parameter, which is used to indicate
whether to create an instance, etc. such as:

type
	TMyObj = class
	public
		constructor Create(a: Integer);
	end;

This Create is actually like this prototype:

void* Create(void* pVmt, char flag, int a)

If the flag is equal to 0，it means that Create is not the most peripheral, and some
initialization does not have to be done, at this time pVmt is an instance that has been
created. If flag is less than 0，indicates that pVmt is an instance that has been created.
If flag is greater than 0, pVmt is the VMT pointer.

In Create, first determine whether the flag is equal to 0, if it is, bypass initialization
and AfterConstruction, because this is the peripheral constructor. If the flag is greater
than 0, you must first allocate memory and initialization, and install exception handling.
If it is less than 0, only the installation exception handling step, please check the
ClassCreate function.

After initializing and executing the code in Create, the outermost constructor calls
AfterConstruction and undoes exception handling. This exception handling ensures that an
exception occurs during construction and can release memory in a timely manner. (The design
here is very subtle, all constructors share an exception handling, efficiency and program
size are taken into account)

If this is done with LLVM, it is a bit complicated, because the exception handling mechanism
of LLVM cannot be installed in one place and then canceled in another place. Only in the same
function. Therefore, only some modifications can be made. C++ is used here to describe the
improved scheme:

void* Create(void* pVmt, char flag, int a)
{
	void* pInst;
	if (flag > 0)
		pInst = NewInstance(pVmt);
	else
		pInst = pVmt;

	try {
		// call parent's constructor
		TObject::Create(pInst, 0);

		// code...

		// call AfterConstruction
		if (flag != 0)
			AfterConstruction(pInst);

		return pInst;
	} catch(...) {
		if (flag != 0)
			FreeInstance(pInst);
		throw;
	}
}

In this way, each constructor must have a try catch, which will cause the program to
become larger.

For the destructor, additional parameters are passed in. One is the instance pointer,
and the other is the tag parameter, used to indicate whether the outermost destructor
is used. If it is the most peripheral, BeforeDestruction is called when entering, and
ClassDestroy is called before returning;

void Destroy(void* Self, char outterMost)
{
	if (outterMost != 0)
		BeforeDestruction(Self);
	TObject::Destroy(Self, 0);
	if (outterMost != 0)
		FreeInstance(Self);
}

Second, the embedded function


Three, string, Variant, interface


Four, exception handling

The general form of LLVM exception handling:

  %.ex.addr = alloca i8*
  
  invoke void @RaiseSomeExcept()
          to label %next.stmt unwind label %lpad
next.stmt:
  ; ... some statement
  br label %try.leave

lpad:
  %1 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %2 = extractvalue { i8*, i32 } %1, 0
  %3 = tail call i8* @__cxa_begin_catch(i8* %2) nounwind
  store i8* %3, i8** %.ex.addr
  br label lpad.body
lpad.body:
  ; Do some processing
  
  ; The exception has been processed
  tail call void @__cxa_end_catch()
  br label %try.leave

  ; If it is not handled and needs to be propagated upwards, use resume to hand over
  ; the process to C++ exception handling
except.lpad.1.resume:
  resume {i8*, i32} %1
  unreachable

try.leave:

The above is the case where there is only one exception handling block (a try except
end statement). If an exception is nested in the try statement, the mechanism is a
little more complicated. When the inner layer exception cannot be handled, you need
to jump to the outer layer to continue processing. Can't use resume to jump

If you use try except end or try finally end in exception handling ？

try

except
	try

	except
	end;
end;

If you use Exit, Continue, Break in exception handling?

for i := 0 to len - 1 do
begin
	try
		someAction;
	except
		try
			if i = 3 then Break;
			someAction;
		except
			if i = 4 then Continue;
		end;
	end;
end;
